<Workflow xmlns:mpwfml="http://pathomx.org/schema/Workflow/2013a"><Styles><ClassMatchStyle is_auto="true"><ClassMatch match_str="H" match_type="1" /><Style color="#1f77b4" fillstyle="full" hatch="None" linestyle="-" linewidth="1.0" marker="o" markeredgecolor="None" markerfacecolor="#1f77b4" markersize="5.0" /></ClassMatchStyle><ClassMatchStyle is_auto="true"><ClassMatch match_str="N" match_type="1" /><Style color="#ff7f0e" fillstyle="full" hatch="None" linestyle="-" linewidth="1.0" marker="o" markeredgecolor="None" markerfacecolor="#ff7f0e" markersize="5.0" /></ClassMatchStyle></Styles><Annotations><Annotation height="50.0" type="AnnotationTextItem" width="307.0" x="32.0" y="-108.0"><Text>1D 1H NMR (Bruker) Analysis</Text><Config><ConfigSetting id="font-size" type="str">18</ConfigSetting><ConfigSetting id="text-color" type="str">#000000</ConfigSetting><ConfigSetting id="text-underline" type="bool">False</ConfigSetting><ConfigSetting id="text-bold" type="bool">True</ConfigSetting><ConfigSetting id="font-family" type="str">Arial</ConfigSetting><ConfigSetting id="text-italic" type="bool">False</ConfigSetting></Config></Annotation><Annotation height="103.0" type="AnnotationTextItem" width="389.0" x="32.0" y="-69.0"><Text>This demonstration workflow shows a basic analysis of 1D 1H NMR from raw Bruker format.

To test this workflow you can use the demo dataset available here:
http://download.pathomx.org/demos/thp1_1d_bruker.zip</Text><Config><ConfigSetting id="font-size" type="str">12</ConfigSetting><ConfigSetting id="text-color" type="str">#000000</ConfigSetting><ConfigSetting id="color-background" type="str">#ffaa00</ConfigSetting><ConfigSetting id="text-underline" type="bool">False</ConfigSetting><ConfigSetting id="text-bold" type="bool">False</ConfigSetting><ConfigSetting id="font-family" type="str">Arial</ConfigSetting><ConfigSetting id="text-italic" type="bool">False</ConfigSetting></Config></Annotation></Annotations><App id="4634680976"><Name>/Users/mxf793/Data/THPNH/Extract/thp1_1d_bruker</Name><Plugin version="1.0">NMRGlue</Plugin><Launcher>BrukerImport</Launcher><EditorXY x="50.0" y="50.0" /><Config><ConfigSetting id="reverse_spectra" type="bool">True</ConfigSetting><ConfigSetting id="delete_imaginaries" type="bool">True</ConfigSetting><ConfigSetting id="zero_fill" type="bool">True</ConfigSetting><ConfigSetting id="zero_fill_to" type="int">32768</ConfigSetting><ConfigSetting id="remove_digital_filter" type="bool">True</ConfigSetting><ConfigSetting id="filename" type="unicode">/Users/mxf793/Data/THPNH/Extract/thp1_1d_bruker</ConfigSetting><ConfigSetting id="autophase_algorithm" type="str">Peak_minima</ConfigSetting></Config><DataInputs /></App><App id="4681102000"><Name>Peak Scale &amp; Shift</Name><Plugin version="1.0">Spectra</Plugin><Launcher>PeakAdjApp</Launcher><EditorXY x="250.0" y="50.0" /><Config><ConfigSetting id="scaling_enabled" type="bool">True</ConfigSetting><ConfigSetting id="peak_target" type="unicode">Custom</ConfigSetting><ConfigSetting id="peak_target_ppm" type="float">0.0</ConfigSetting><ConfigSetting id="shifting_enabled" type="bool">True</ConfigSetting><ConfigSetting id="peak_target_ppm_tolerance" type="float">0.25</ConfigSetting></Config><DataInputs><Input id="input_data" interface="output_data" manager="4634680976" /></DataInputs><Code>import nmrglue as ng
import numpy as np
import pandas as pd

# Get the target region from the spectra (will be using this for all calculations;
# then applying the result to the original data)

if type(input_data.columns) in [pd.Index, pd.Float64Index]:
    scale = input_data.columns.values
elif type(input_data.columns) == pd.MultiIndex:
    try:
        scidx = input_data.columns.names.index('ppm')
    except:
        scidx = input_data.columns.names.index('Label')
        
    scale = [c[scidx] for c in input_data.columns.values]
    
target_ppm = config.get('peak_target_ppm')
tolerance_ppm = config.get('peak_target_ppm_tolerance')
start_ppm = target_ppm - tolerance_ppm
end_ppm = target_ppm + tolerance_ppm

start = min(list(range(len(scale))), key=lambda i: abs(scale[i]-start_ppm))        
end = min(list(range(len(scale))), key=lambda i: abs(scale[i]-end_ppm))        

# Shift first; then scale
d = 1 if end&gt;start else -1
data = input_data.iloc[:,start:end:d]
region_scales = scale[start:end:d]
#region_labels = labels[start:end:d]
#region_entities = dsientities[1][start:end:d]

pcentre = min(list(range(len(region_scales))), key=lambda i: abs(region_scales[i]-target_ppm))  # Base centre point to shift all spectra to


reference_peaks = []
for index, sdata in data.iterrows():
    ix = np.argmax(sdata.values)

    reference_peaks.append({
            'location': ix, #FIXME: better behaviour when &gt;1 peak?
            'amplitude': sdata.iloc[ix],
        })


if config.get('shifting_enabled'):
    # Take a np array for speed on shifting
    shift_array = input_data.values
    # Now shift the original spectra to fi
    for n,refp in enumerate(reference_peaks):
        if refp:
            # Shift the spectra
            shift = (pcentre-refp['location']) * d
            # FIXME: This is painfully slow
            if shift &gt; 0:
                shift_array[n, shift:-1] = shift_array[n, 0:-(shift+1)]
            elif shift &lt; 0:
                shift_array[n, 0:shift-1] = shift_array[n, abs(shift):-1]

    input_data = pd.DataFrame( shift_array, index=input_data.index, columns=input_data.columns)


if config.get('scaling_enabled'):
    # Get mean reference peak size
    reference_peak_mean = np.mean( [r['amplitude'] for r in reference_peaks if r ] )
    print('Reference peak mean %s' % reference_peak_mean)

    # Now scale; using the same peak regions &amp; information (so we don't have to worry about something
    # being shifted out of the target region in the first step)
    for n,refp in enumerate(reference_peaks):
        if refp:
            # Scale the spectra
            amplitude = reference_peak_mean/refp['amplitude']
            input_data.iloc[n] *= amplitude
            

# -- optionally use the line widths and take max within each of these for each spectra (peak shiftiness)
# Filter the original data with those locations and output\

output_data = input_data

region = output_data.iloc[:,start:end:d]

# Generate simple result figure (using pathomx libs)
from pathomx.figures import spectra

View = spectra(output_data, styles=styles);
Region = spectra(region, styles=styles);

data = None;
</Code></App><App id="4681135984"><Name>Icoshift</Name><Plugin version="1.0">Icoshift</Plugin><Launcher>IcoshiftApp</Launcher><EditorXY x="450.0" y="50.0" /><Config><ConfigSetting id="target" type="unicode">average2</ConfigSetting><ConfigSetting id="fill_with_previous" type="bool">True</ConfigSetting><ConfigSetting id="selected_data_regions" type="list" /><ConfigSetting id="maximum_shift_n" type="int">50</ConfigSetting><ConfigSetting id="average2_multiplier" type="int">3</ConfigSetting><ConfigSetting id="intervals" type="unicode">number_of_intervals</ConfigSetting><ConfigSetting id="mode" type="str">None</ConfigSetting><ConfigSetting id="maximum_shift" type="unicode">f</ConfigSetting><ConfigSetting id="coshift_proprocess" type="bool">False</ConfigSetting><ConfigSetting id="coshift_preprocessing" type="bool">True</ConfigSetting><ConfigSetting id="number_of_intervals" type="int">50</ConfigSetting></Config><DataInputs><Input id="input_data" interface="output_data" manager="4681102000" /></DataInputs></App><App id="4681194240"><Name>Spectra Exclusion</Name><Plugin version="1.0">Spectra</Plugin><Launcher>SpectraExclusionTool</Launcher><EditorXY x="650.0" y="50.0" /><Config><ConfigSetting id="exclude_2_end" type="float">5.0</ConfigSetting><ConfigSetting id="exclude_2_start" type="float">4.5</ConfigSetting><ConfigSetting id="exclude_1_start" type="float">-2.0</ConfigSetting><ConfigSetting id="selected_data_regions" type="list"><ListItem type="list"><ListItem type="str">TMSP</ListItem><ListItem type="int">-2</ListItem><ListItem type="int">0</ListItem><ListItem type="float">0.2</ListItem><ListItem type="int">0</ListItem></ListItem><ListItem type="list"><ListItem type="str">Water</ListItem><ListItem type="float">4.5</ListItem><ListItem type="int">0</ListItem><ListItem type="int">5</ListItem><ListItem type="int">0</ListItem></ListItem><ListItem type="list"><ListItem type="str">Far</ListItem><ListItem type="int">10</ListItem><ListItem type="int">0</ListItem><ListItem type="int">12</ListItem><ListItem type="int">0</ListItem></ListItem></ConfigSetting><ConfigSetting id="exclude_3_start" type="float">10.0</ConfigSetting><ConfigSetting id="exclude_3_end" type="float">12.0</ConfigSetting><ConfigSetting id="exclude_2" type="bool">True</ConfigSetting><ConfigSetting id="exclude_3" type="bool">True</ConfigSetting><ConfigSetting id="exclude_1" type="bool">True</ConfigSetting><ConfigSetting id="exclude_1_end" type="float">0.2</ConfigSetting></Config><DataInputs><Input id="input_data" interface="output_data" manager="4681135984" /></DataInputs></App><App id="4686527536"><Name>Spectra normalisation</Name><Plugin version="1.0">Spectra</Plugin><Launcher>SpectraNormApp</Launcher><EditorXY x="1050.0" y="50.0" /><Config><ConfigSetting id="algorithm" type="str">PQN</ConfigSetting></Config><DataInputs><Input id="input_data" interface="output_data" manager="4686560152" /></DataInputs></App><App id="4686560152"><Name>Spectra Binning (1D)</Name><Plugin version="1.0">Spectra</Plugin><Launcher>BinningApp</Launcher><EditorXY x="850.0" y="50.0" /><Config><ConfigSetting id="bin_size" type="float">0.01</ConfigSetting></Config><DataInputs><Input id="input_data" interface="output_data" manager="4681194240" /></DataInputs></App><App id="4686588976"><Name>Reclassify</Name><Plugin version="1.0">Filter</Plugin><Launcher>ReclassifyTool</Launcher><EditorXY x="1250.0" y="50.0" /><Config><ConfigSetting id="filters" type="list"><ListItem type="tuple"><ListItem type="unicode">85</ListItem><ListItem type="unicode">H</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">89</ListItem><ListItem type="unicode">H</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">91</ListItem><ListItem type="unicode">H</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">93</ListItem><ListItem type="unicode">H</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">95</ListItem><ListItem type="unicode">H</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">97</ListItem><ListItem type="unicode">H</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">99</ListItem><ListItem type="unicode">H</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">101</ListItem><ListItem type="unicode">H</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">103</ListItem><ListItem type="unicode">N</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">105</ListItem><ListItem type="unicode">N</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">107</ListItem><ListItem type="unicode">N</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">109</ListItem><ListItem type="unicode">N</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">111</ListItem><ListItem type="unicode">N</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">115</ListItem><ListItem type="unicode">N</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">117</ListItem><ListItem type="unicode">N</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">119</ListItem><ListItem type="unicode">N</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">113</ListItem><ListItem type="unicode">N</ListItem><ListItem type="unicode">Sample</ListItem></ListItem><ListItem type="tuple"><ListItem type="unicode">87</ListItem><ListItem type="unicode">H</ListItem><ListItem type="unicode">Sample</ListItem></ListItem></ConfigSetting></Config><DataInputs><Input id="input_data" interface="output_data" manager="4686527536" /></DataInputs></App><App id="4686688640"><Name>Export dataframe</Name><Plugin version="1.0">Export</Plugin><Launcher>ExportDataframe</Launcher><EditorXY x="1650.0" y="50.0" /><Config><ConfigSetting id="filename" type="str">/Users/mxf793/Desktop/test.csv</ConfigSetting></Config><DataInputs><Input id="input_data" interface="output_data" manager="4686716408" /></DataInputs></App><App id="4686716408"><Name>MetaboHunter</Name><Plugin version="1.0">MetaboHunter</Plugin><Launcher>MetaboHunterApp</Launcher><EditorXY x="1450.0" y="50.0" /><Config><ConfigSetting id="Metabotype" type="str">Mammalian</ConfigSetting><ConfigSetting id="Sample pH" type="str">ph7</ConfigSetting><ConfigSetting id="Frequency" type="str">600</ConfigSetting><ConfigSetting id="Method" type="str">HighestNumberNeighbourhood</ConfigSetting></Config><DataInputs><Input id="input_data" interface="output_data" manager="4686588976" /></DataInputs></App><App id="4782462376"><Name>PLS-DA</Name><Plugin version="1.0">Multivariate</Plugin><Launcher>PLSDATool</Launcher><EditorXY x="1450.0" y="150.0" /><Config><ConfigSetting id="experiment_control" type="unicode">H</ConfigSetting><ConfigSetting id="number_of_components" type="int">2</ConfigSetting><ConfigSetting id="plot_sample_numbers" type="bool">True</ConfigSetting><ConfigSetting id="experiment_test" type="unicode">N</ConfigSetting></Config><DataInputs><Input id="input_data" interface="output_data" manager="4686588976" /></DataInputs></App></Workflow>